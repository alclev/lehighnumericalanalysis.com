{"ast":null,"code":"export var dim_LIMIT = 25;\nexport function drawMatrix(matrixData, canvas, ctx) {\n  const dimensions = matrixData.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  const elements = matrixData.split('\\n')[1];\n  const data = elements.split(',');\n  canvas.width = num_rows * 50;\n  canvas.height = num_cols * 50;\n\n  // Iterate through the rows and columns of the matrix\n  for (let i = 0; i < num_rows; i++) {\n    for (let j = 0; j < num_cols; j++) {\n      // Draw a cell with a border\n      ctx.beginPath();\n      ctx.rect(j * 50, i * 50, 50, 50);\n      ctx.stroke();\n\n      // Display the element of the matrix in the cell\n      ctx.font = '24px Arial';\n      ctx.fillStyle = 'grey';\n      ctx.textAlign = 'center';\n      ctx.fillText(data[i * num_cols + j], j * 50 + 25, i * 50 + 35);\n    }\n  }\n}\n\n// Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix) {\n  // Check dimensions\n  const dimensions = matrix.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  if (isNaN(num_rows) || isNaN(num_cols)) {\n    return false;\n  }\n  console.log(dim_LIMIT);\n  if (num_rows > dim_LIMIT || num_cols > dim_LIMIT || num_rows < 1 || num_cols < 1) {\n    return false;\n  }\n  // Check elements\n  const elements = matrix.split('\\n')[1];\n  const elements_array = elements.split(',');\n  if (elements_array.length !== num_rows * num_cols) {\n    return false;\n  }\n  for (let i = 0; i < elements_array.length; i++) {\n    if (isNaN(parseInt(elements_array[i]))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Define an array of button data, where each item contains a button label and a function ID\ne;\n// Define data format for json objects\nexport const packet = {\n  'func_id': 0x00,\n  'args': '',\n  'matrix': ''\n};","map":{"version":3,"names":["dim_LIMIT","drawMatrix","matrixData","canvas","ctx","dimensions","split","num_rows","parseInt","num_cols","elements","data","width","height","i","j","beginPath","rect","stroke","font","fillStyle","textAlign","fillText","parseMatrix","matrix","isNaN","console","log","elements_array","length","e","packet"],"sources":["/Users/alexclevenger/lehighnumericalanalysis.com/src/dataPackaging.js"],"sourcesContent":["export var dim_LIMIT = 25;\n\nexport function drawMatrix(matrixData, canvas, ctx) {\n  const dimensions = matrixData.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  const elements = matrixData.split('\\n')[1];\n  const data = elements.split(',');\n\n  canvas.width = num_rows * 50;\n  canvas.height = num_cols * 50;\n\n  // Iterate through the rows and columns of the matrix\n  for (let i = 0; i < num_rows; i++) {\n    for (let j = 0; j < num_cols; j++) {\n      // Draw a cell with a border\n      ctx.beginPath();\n      ctx.rect(j * 50, i * 50, 50, 50);\n      ctx.stroke();\n\n      // Display the element of the matrix in the cell\n      ctx.font = '24px Arial';\n      ctx.fillStyle = 'grey';\n      ctx.textAlign = 'center';\n      ctx.fillText(data[i * num_cols + j], j * 50 + 25, i * 50 + 35);\n    }\n  }\n}\n\n\n\n\n  // Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix) {\n    // Check dimensions\n    const dimensions = matrix.split('\\n')[0];\n    const num_rows = parseInt(dimensions.split(',')[0]);\n    const num_cols = parseInt(dimensions.split(',')[1]);\n    if (isNaN(num_rows) || isNaN(num_cols)) {\n      return false;\n    }\n    console.log(dim_LIMIT);\n    if (num_rows > dim_LIMIT || num_cols > dim_LIMIT || num_rows < 1 || num_cols < 1) {\n      return false;\n    }\n    // Check elements\n    const elements = matrix.split('\\n')[1];\n    const elements_array = elements.split(',');\n    if (elements_array.length !== num_rows * num_cols) {\n      return false;\n    }\n    for (let i = 0; i < elements_array.length; i++) {\n      if (isNaN(parseInt(elements_array[i]))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n// Define an array of button data, where each item contains a button label and a function ID\ne\n// Define data format for json objects\nexport const packet = {\n  'func_id': 0x00,\n  'args': '',\n  'matrix': '',\n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}