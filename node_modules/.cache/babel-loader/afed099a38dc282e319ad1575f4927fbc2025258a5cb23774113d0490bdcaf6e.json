{"ast":null,"code":"export var dim_LIMIT = 25;\nexport function drawMatrix(matrixData, canvas) {\n  const dimensions = matrixData.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  const ctx = canvas.getContext('2d');\n  const size = 40;\n  canvas.width = matrix[0].length * size;\n  canvas.height = matrix.length * size;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"#000000\";\n  for (let row = 0; row < num_rows; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      const value = matrix[row][col];\n      ctx.fillText(value, col * size + size / 2, row * size + size / 2);\n    }\n  }\n}\n\n// Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix) {\n  // Check dimensions\n  const dimensions = matrix.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  if (isNaN(num_rows) || isNaN(num_cols)) {\n    return false;\n  }\n  if (num_rows > dim_LIMIT || num_cols > dim_LIMIT) {\n    return false;\n  }\n  // Check elements\n  const elements = matrix.split('\\n')[1];\n  const elements_array = elements.split(',');\n  if (elements_array.length !== num_rows * num_cols) {\n    return false;\n  }\n  for (let i = 0; i < elements_array.length; i++) {\n    if (isNaN(parseInt(elements_array[i]))) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Define an array of button data, where each item contains a button label and a function ID\nconst buttonData = [\n// Basic opertions (0x10 - 0x1F)\n{\n  label: 'Add',\n  func_id: 0x10\n}, {\n  label: 'Multiply',\n  func_id: 0x11\n}, {\n  label: 'Transpose',\n  func_id: 0x12\n}, {\n  label: 'Inverse',\n  func_id: 0x13\n},\n// Direct methods for solving (0x20 - 0x2F)\n{\n  label: 'Gauss Elimination',\n  func_id: 0x20\n}, {\n  label: 'Blank',\n  func_id: 0x21\n}, {\n  label: 'Blank',\n  func_id: 0x22\n}, {\n  label: 'Blank',\n  func_id: 0x23\n},\n// Indirect methods for solving (0x30 - 0x3F)\n{\n  label: 'Jacobi Method',\n  func_id: 0x30\n}, {\n  label: 'Blank',\n  func_id: 0x31\n}, {\n  label: 'Blank',\n  func_id: 0x32\n}, {\n  label: 'Blank',\n  func_id: 0x33\n},\n// Preconditioner (0x40 - 0x4F)\n{\n  label: 'Blank',\n  func_id: 0x40\n}, {\n  label: 'Blank',\n  func_id: 0x41\n}, {\n  label: 'Blank',\n  func_id: 0x42\n}, {\n  label: 'Blank',\n  func_id: 0x43\n}];\nexport default buttonData;","map":{"version":3,"names":["dim_LIMIT","drawMatrix","matrixData","canvas","dimensions","split","num_rows","parseInt","num_cols","ctx","getContext","size","width","matrix","length","height","clearRect","fillStyle","row","col","value","fillText","parseMatrix","isNaN","elements","elements_array","i","buttonData","label","func_id"],"sources":["/Users/alexclevenger/lehighnumericalanalysis.com/src/dataPackaging.js"],"sourcesContent":["export var dim_LIMIT = 25;\n\nexport function drawMatrix(matrixData, canvas) {\n  const dimensions = matrixData.split('\\n')[0];\n  const num_rows = parseInt(dimensions.split(',')[0]);\n  const num_cols = parseInt(dimensions.split(',')[1]);\n  const ctx = canvas.getContext('2d');\n  const size = 40;\n  canvas.width = matrix[0].length * size;\n  canvas.height = matrix.length * size;\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.fillStyle = \"#000000\";\n  for (let row = 0; row < num_rows; row++) {\n    for (let col = 0; col < matrix[row].length; col++) {\n      const value = matrix[row][col];\n      ctx.fillText(value, col * size + size / 2, row * size + size / 2);\n    }\n  }\n}\n\n\n\n\n  // Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix) {\n    // Check dimensions\n    const dimensions = matrix.split('\\n')[0];\n    const num_rows = parseInt(dimensions.split(',')[0]);\n    const num_cols = parseInt(dimensions.split(',')[1]);\n    if (isNaN(num_rows) || isNaN(num_cols)) {\n      return false;\n    }\n    if (num_rows > dim_LIMIT || num_cols > dim_LIMIT) {\n      return false;\n    }\n    // Check elements\n    const elements = matrix.split('\\n')[1];\n    const elements_array = elements.split(',');\n    if (elements_array.length !== num_rows * num_cols) {\n      return false;\n    }\n    for (let i = 0; i < elements_array.length; i++) {\n      if (isNaN(parseInt(elements_array[i]))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n// Define an array of button data, where each item contains a button label and a function ID\nconst buttonData = [\n// Basic opertions (0x10 - 0x1F)\n  { label: 'Add', func_id: 0x10 },\n  { label: 'Multiply', func_id: 0x11 },\n  { label: 'Transpose', func_id: 0x12 },\n  { label: 'Inverse', func_id: 0x13 },\n// Direct methods for solving (0x20 - 0x2F)\n  { label: 'Gauss Elimination', func_id: 0x20 },\n  { label: 'Blank', func_id: 0x21 },\n  { label: 'Blank', func_id: 0x22 },\n  { label: 'Blank', func_id: 0x23 },\n// Indirect methods for solving (0x30 - 0x3F)\n  { label: 'Jacobi Method', func_id: 0x30 },\n  { label: 'Blank', func_id: 0x31 },\n  { label: 'Blank', func_id: 0x32 },\n  { label: 'Blank', func_id: 0x33 },\n// Preconditioner (0x40 - 0x4F)\n  { label: 'Blank', func_id: 0x40 },\n  { label: 'Blank', func_id: 0x41 },\n  { label: 'Blank', func_id: 0x42 },\n  { label: 'Blank', func_id: 0x43 },\n];\nexport default buttonData;\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}