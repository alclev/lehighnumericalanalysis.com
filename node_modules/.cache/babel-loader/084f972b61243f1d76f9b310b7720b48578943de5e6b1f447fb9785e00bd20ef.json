{"ast":null,"code":"export function drawMatrix(num_rows,num_cols,matrix_data){var canvas=document.createElement('canvas');var ctx=canvas.getContext('2d');// Set the size of the canvas to fit the matrix\ncanvas.width=num_cols*50;canvas.height=num_rows*50;// Iterate through the rows and columns of the matrix\nfor(var i=0;i<num_rows;i++){for(var j=0;j<num_cols;j++){// Draw a cell with a border\nctx.beginPath();ctx.rect(j*50,i*50,50,50);ctx.stroke();// Display the element of the matrix in the cell\nctx.font='24px Arial';ctx.fillStyle='grey';ctx.textAlign='center';ctx.fillText(matrix_data[i*num_cols+j],j*50+25,i*50+35);}}return canvas;}// Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix){return;}// Define an array of button data, where each item contains a button label and a function ID\nvar buttonData=[// Basic opertions (0x10 - 0x1F)\n{label:'Add',func_id:0x10},{label:'Multiply',func_id:0x11},{label:'Transpose',func_id:0x12},{label:'Inverse',func_id:0x13},// Direct methods for solving (0x20 - 0x2F)\n{label:'Gauss Elimination',func_id:0x20},{label:'Blank',func_id:0x21},{label:'Blank',func_id:0x22},{label:'Blank',func_id:0x23},// Indirect methods for solving (0x30 - 0x3F)\n{label:'Jacobi Method',func_id:0x30},{label:'Blank',func_id:0x31},{label:'Blank',func_id:0x32},{label:'Blank',func_id:0x33},// Preconditioner (0x40 - 0x4F)\n{label:'Blank',func_id:0x40},{label:'Blank',func_id:0x41},{label:'Blank',func_id:0x42},{label:'Blank',func_id:0x43},{label:'Gauss Elimination',func_id:3}];export default buttonData;","map":{"version":3,"names":["drawMatrix","num_rows","num_cols","matrix_data","canvas","document","createElement","ctx","getContext","width","height","i","j","beginPath","rect","stroke","font","fillStyle","textAlign","fillText","parseMatrix","matrix","buttonData","label","func_id"],"sources":["/Users/alexclevenger/lehighnumericalanalysis.com/src/dataPackaging.js"],"sourcesContent":["export function drawMatrix(num_rows, num_cols, matrix_data) {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n  \n    // Set the size of the canvas to fit the matrix\n    canvas.width = num_cols * 50;\n    canvas.height = num_rows * 50;\n  \n    // Iterate through the rows and columns of the matrix\n    for (let i = 0; i < num_rows; i++) {\n      for (let j = 0; j < num_cols; j++) {\n        // Draw a cell with a border\n        ctx.beginPath();\n        ctx.rect(j * 50, i * 50, 50, 50);\n        ctx.stroke();\n  \n        // Display the element of the matrix in the cell\n        ctx.font = '24px Arial';\n        ctx.fillStyle = 'grey';\n        ctx.textAlign = 'center';\n        ctx.fillText(matrix_data[i * num_cols + j], j * 50 + 25, i * 50 + 35);\n      }\n    }\n    return canvas;\n  }\n\n  // Returns true or false depending on whether matrix is correct format\nexport function parseMatrix(matrix) {\n    \n  \n    return \n  }\n\n// Define an array of button data, where each item contains a button label and a function ID\nconst buttonData = [\n// Basic opertions (0x10 - 0x1F)\n  { label: 'Add', func_id: 0x10 },\n  { label: 'Multiply', func_id: 0x11 },\n  { label: 'Transpose', func_id: 0x12 },\n  { label: 'Inverse', func_id: 0x13 },\n// Direct methods for solving (0x20 - 0x2F)\n  { label: 'Gauss Elimination', func_id: 0x20 },\n  { label: 'Blank', func_id: 0x21 },\n  { label: 'Blank', func_id: 0x22 },\n  { label: 'Blank', func_id: 0x23 },\n// Indirect methods for solving (0x30 - 0x3F)\n  { label: 'Jacobi Method', func_id: 0x30 },\n  { label: 'Blank', func_id: 0x31 },\n  { label: 'Blank', func_id: 0x32 },\n  { label: 'Blank', func_id: 0x33 },\n// Preconditioner (0x40 - 0x4F)\n  { label: 'Blank', func_id: 0x40 },\n  { label: 'Blank', func_id: 0x41 },\n  { label: 'Blank', func_id: 0x42 },\n  { label: 'Blank', func_id: 0x43 },\n  \n\n  { label: 'Gauss Elimination', func_id: 3 },\n];\nexport default buttonData;\n\n\n\n\n"],"mappings":"AAAA,MAAO,SAAS,CAAAA,UAAUA,CAACC,QAAQ,CAAEC,QAAQ,CAAEC,WAAW,CAAE,CACxD,GAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAC/C,GAAM,CAAAC,GAAG,CAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC,CAEnC;AACAJ,MAAM,CAACK,KAAK,CAAGP,QAAQ,CAAG,EAAE,CAC5BE,MAAM,CAACM,MAAM,CAAGT,QAAQ,CAAG,EAAE,CAE7B;AACA,IAAK,GAAI,CAAAU,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,QAAQ,CAAEU,CAAC,EAAE,CAAE,CACjC,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,QAAQ,CAAEU,CAAC,EAAE,CAAE,CACjC;AACAL,GAAG,CAACM,SAAS,EAAE,CACfN,GAAG,CAACO,IAAI,CAACF,CAAC,CAAG,EAAE,CAAED,CAAC,CAAG,EAAE,CAAE,EAAE,CAAE,EAAE,CAAC,CAChCJ,GAAG,CAACQ,MAAM,EAAE,CAEZ;AACAR,GAAG,CAACS,IAAI,CAAG,YAAY,CACvBT,GAAG,CAACU,SAAS,CAAG,MAAM,CACtBV,GAAG,CAACW,SAAS,CAAG,QAAQ,CACxBX,GAAG,CAACY,QAAQ,CAAChB,WAAW,CAACQ,CAAC,CAAGT,QAAQ,CAAGU,CAAC,CAAC,CAAEA,CAAC,CAAG,EAAE,CAAG,EAAE,CAAED,CAAC,CAAG,EAAE,CAAG,EAAE,CAAC,CACvE,CACF,CACA,MAAO,CAAAP,MAAM,CACf,CAEA;AACF,MAAO,SAAS,CAAAgB,WAAWA,CAACC,MAAM,CAAE,CAGhC,OACF,CAEF;AACA,GAAM,CAAAC,UAAU,CAAG,CACnB;AACE,CAAEC,KAAK,CAAE,KAAK,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC/B,CAAED,KAAK,CAAE,UAAU,CAAEC,OAAO,CAAE,IAAK,CAAC,CACpC,CAAED,KAAK,CAAE,WAAW,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC,CAAED,KAAK,CAAE,SAAS,CAAEC,OAAO,CAAE,IAAK,CAAC,CACrC;AACE,CAAED,KAAK,CAAE,mBAAmB,CAAEC,OAAO,CAAE,IAAK,CAAC,CAC7C,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACnC;AACE,CAAED,KAAK,CAAE,eAAe,CAAEC,OAAO,CAAE,IAAK,CAAC,CACzC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACnC;AACE,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CACjC,CAAED,KAAK,CAAE,OAAO,CAAEC,OAAO,CAAE,IAAK,CAAC,CAGjC,CAAED,KAAK,CAAE,mBAAmB,CAAEC,OAAO,CAAE,CAAE,CAAC,CAC3C,CACD,cAAe,CAAAF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}